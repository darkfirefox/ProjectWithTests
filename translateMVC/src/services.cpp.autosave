#include "services.h"
Services* Services::services=0;
ServicesDestroyer Services::destroyer;

Services::Services()
{
    streamData=&StreamData::Instance();
    connect(this,SIGNAL(writeInputData(InputData)),streamData,SLOT(writeInputData(InputData)));
    connect(this,SIGNAL(writeAnswer(Answer)),streamData,SLOT(writeAnswer(Answer)));
}

Services &Services::Instance()
{
    if(!services){
        services=new Services();
        destroyer.init(services);
    }
    return *services;
}

void Services::transalate(QString langFrom, QString langTo, QString sourceText)
{
    serviceHttp->sendRequest(converter.toString(langFrom,langTo,sourceText));
    InputData id=conv.toInputData(langFrom,langTo,sourceText);
    emit writeInputData(id);
}

bool Services::deleteAll()
{
    return serviceHistory->deleteAll();
}

bool Services::deleteRow(int id)
{
    return serviceHistory->deleteRow(id);
}

ListElementhistory Services::readAll()
{
    ListElementhistory leh=parser.fromListRecords(serviceHistory->readAll());
    return leh;
}

void Services::setService(IServiceHistory *service)
{
    serviceHistory=service;
}

void Services::setService(IServiceHttp *service)
{
    serviceHttp=service;
    connect(dynamic_cast<QObject*>(serviceHttp),SIGNAL(receiveAnswer(QNetworkReply*)),this,SLOT(receivedTranslatedText(QNetworkReply*)));
}

void Services::receivedTranslatedText(QNetworkReply *reply)
{
    try{
        QString response=converter.translatedFromReply(reply);
        if(response.isEmpty());
        else{
            Answer answer=conv.toAnswer(response);
            emit writeAnswer(answer);
            serviceHistory->insertRow(parser.fromData(streamData->getInputData(),answer));
        }
    }catch(...){

    }
}

ServicesDestroyer::~ServicesDestroyer()
{
    delete instance;
}

void ServicesDestroyer::init(Services *services)
{
    instance=services;
}
